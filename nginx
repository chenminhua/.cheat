http://tengine.taobao.org/book/chapter_03.html

master进程主要负责接收请求，向worker发信号，监控worker,重启worker等等。
每个worker都是master fork出来的，在Master里面先建立需要Listen的socket，然后fork出worker，每个worker会去竞争连接，但是只有一个能够抢到锁，并accept请求。
nginx采用异步非阻塞的IO（epoll/kqueue），好处是并发不会导致cpu上下文的切换，只是占用更多内存而已。

ulimit -n 可以查看一个进程能够打开的fd的最大数，也就是nofile,因为每个socket连接会占用一个fd,这会限制最大连接数。
nginx在实现时，是通过一个连接池来管理的，每个worker都有一个独立的连接池，连接池大小是worker_connections

# systemd管理nginx
systemctl enable nginx
systemctl start/stop/restart nginx

nginx -s stop
nginx -s reload
nginx -t 测试配置是否正确
nginx -v 显示nginx版本
nginx -V 显示编译阶段配置参数

# 配置
user nginx; 用户和用户组
worker_processes 8; worker数，默认是cpu核数
error_log /var/log/nginx/error.log crit;  错误日志路径和错误级别 
pid /run/nginx.pid; pid存放地址

include /path/to/custom/config;

events {
    use epoll; 使用的IO模型
    worker_connections 51200; 每个worker的最大连接数
}

http {
    server{
        location / {
            
        }
    }   
}

# 虚拟主机
## 给网卡加ip
使用ip命令即可，但是因为重启会失效，可以将命令写到/etc/rc.local文件中，这样在开机时可以自动运行。
一个server就是一个虚拟主机

http {
    server{
        listen 192.168.8.43:80;       监听的ip和端口
        server_name 192.168.8.438.43;  主机名
        access_log logs/server1.access.log combined;       访问日志的存放路径
        location / {
            index index.html;
            root /data/server1;   文件存放路径
        }   
    }

    server {
        listen    192.168.8.44:80;
        server_name    192.168.8.44;
        access_log     logs/server2.access.log combined;
        location / {
            index index.html;
            root /data/server2;
        }
    }
}

也可以配置基于域名的虚拟主机，只需要配置好DNS服务器，将每个主机名映射到正确的ip地址。

http {
    server {
        listen 80;
        server_name aaa.domain.com;
        ...
    }
    server {
        listen 80;
        server_name bbb.domain.com;
        ...
    }
}

## 日志文件配置和切割
设置日志格式
log_format combined '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent"';
log_format mylogFormat '$http_x_forward_for - $remote_user [$time_local] '

```
#!/bin/bash
#每天00:00运行并生成新的nginx日志
logs_path="/data/logs"

mkdir -p ${logs_path}$(date -d "yesterday" + "%Y")/$(date -d "yesterday" + "%m")/
mv balabala
kill -USR1 `cat \run\nginx.pid`
```

## gzip
gzip on
gzip_min_length 1k;

## 浏览器本地缓存设置
expires 1h;

## 负载均衡
第四层和第七层，nginx是第七层的负载均衡

## 反向代理
upstream api_server_pool {
    server 192.168.1.13:3245;
    server 192.168.1.14:3245;
}

upstream web_server_poll {
    server 192.168.1.15:80
    server 192.168.1.16:80
}

server {
    listen 80;
    server_name api.yourdomain.com;
 
    location / {
        proxy_pass http://api_server_pool;
        proxy_set_header HOST $host;
        proxy_set_header X-Forward-For $remote_addr;
    }
}

## upstream
upstream backend {
    ip_hash;
    server backend1.example.com;
    server backend2.example.com;
    server backend3.example.com down;  停用
    server backend4.example.com;
}

## nginx Rewrite规则相关指令

