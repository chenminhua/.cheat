架构师要有同理心，即认同他人的能力。在接手他人的模块时能读懂他人的思想。
要修炼全局观，保持好奇心与韧劲。
要修炼迭代能力，学会否定自己。

架构设计基本准则： KISS, Modularity, Testable, Orthogonal Decomposition

可测试往往意味着低耦合。测试能帮助我们发现模块架构调整的潜在问题。通常模块在架构调整期最容易引入bug。

架构就是对系统进行正交分解的过程。而正交分解的第一步就是区分核心系统和子系统。
核心系统是业务的最小功能子集，而基于最小功能子集不断增加新功能演变出功能强大的复杂系统。

对于核心系统的变更要小心，如果某个新功能早期没有规划，后期却被界定为属于核心功能，我们就要认真评估它对既有架构的破坏性。

为了实现周边系统的功能，需要修改核心系统的代码越多，对核心系统的伤害越大。

架构就是业务的正交分解，每个模块都有自己的业务。

比框架更重要的是数据结构，比数据结构更重要的是接口。

KISS原则提倡的简单，有时候并不是接口外观上的简洁，而是业务语义表达上的准确无歧义。

全局性功能的特征是很难被剥离出来成为独立模块的。以Office软件为例：
读盘/存盘功能：每增加一个功能，都要考虑读盘和存盘。
undo/redo功能：没增加一个操作，都要考虑其如何回滚/重做。
宏录制：每增加一个操作，都要考虑这个功能如何用api表达。
有些功能虽然是全局的，但是比较容易做正交分解（比如api鉴权，日志等）。这些我们暂时不做全局功能讨论。

读盘/存盘本身需求是发散的，因为要支持的文档格式会越来越多，所以我们要把它独立成一个IO子系统。
既然要独立子系统，就要抽象出它对核心系统的稳定依赖。这个稳定依赖最后被抽象为IO DOM，原因在于DOM是核心系统的常规界面。
引入后只和数据有关的IO DOM，相当于给DOM规范了一个接口子集，用于和IO子系统交互。
这样，虽然IO DOM是IO子系统对IO子系统的侵入，但我们把这种全局性侵入降到了最低。

Undo/Redo功能。Command设计模式。
每个用户操作都实现为一个Command，每个Command都提供Undo功能。
另一个思路是增加数据层的概念。
我们并不是在问题发生的地方解决问题，这也是需求分析的复杂性所在。

架构师的信仰： 任何功能都是可以正交分解的。如果我还没有找到，那是我还没理解透彻需求。
业务分解就是最小化核心系统，加上多个正交分解的周边系统。
核心系统一定要最小化，要稳定。要检查不往核心系统中增加功能。
保持核心系统的纯洁性比什么都重要。


