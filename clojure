# clojure
[setup](https://gist.github.com/technomancy/2395913)
[知乎](https://www.zhihu.com/question/20024294)
[教程](https://wizardforcel.gitbooks.io/clojure-fpftj/content/4.html)

## setup
brew install leiningen
lein new sevenlang
cd sevenlang
lein repl  //交互式

## 基本语法
(class 1)         //java.lang.Long
(mod 5 4)         //1
(+ 2 2 2)         //6
(< 1 2 3)         //true
(< 1 3 2)         //false
(+ 3 5.0)     //8.0 clojure支持强类型和动态类型

## 字符和字符串
(str 1)  //数字转字符串
(str "hello, " "world")  //拼接字符串
(str "one: " 1 " two: " 2)  //拼接字符串

\a    //字符
(str \f \o \r \c \e)    //拼接字符为字符串
(= "a" \a)        //false
(= (str \a) "a")  //true

## list,vector,set,map
(list 1 2 3)    //创建列表
(first '(:r2d2 :c3po))
(last '(:r2d2 :c3po))
(rest '(:r2d2 :c3po))
(cons :battle-froid '(:r2d2 :c3po))

## 向量
[:hutt :wookie :ewok]
(first [:hutt :wookie :ewok])  //:hutt
(last [:hutt :wookie :ewok])   //:ewok
(nth [:hutt :wookie :ewok] 2)  //:ewok
(concat [:darth-vader] [:darth-maul])  //合并向量

## set
#{:xwing, :ywing, :tie-fighter}
(def spacecraft #{:xwing, :ywing, :tie-fighter})
(count spacecraft)
(sort spacecraft)
(sort-set 2 3 1)  // #{1 2 3}
(clojure.set/union #{:skywalker} #{:vader})  // 并集
(clojure.set/difference #{1 2 3} #{2})  //差集

## map
{:name "chen" :location "sh"}
(def mentors {:darth-vader "obi wan", :luke "yoda"})
(mentors :luke)
(:luke mentors)
//合并
(merge {:ywing 2, :xwing 4} {:tie-fighter 2})
(merge-with + {...} {...})

## if
(if true (println "true it is"))
(if (> 1 2) (println "a") (println "b"))

## 函数
(defn force-it
	"the first function a young jedi needs" 
	[jedi] 
	(str "use the force" jedi))
(force-it "luke")
(doc force-it)

## 绑定
绑定是指按照实参对形参进行赋值的过程
(def line [[0 0] [10 20]])
(defn line-end [[_ second]] second)
(line-end line)   // [10,20]

## 匿名函数
(def people ["lea", "han solo"])
(map count people)   // (3 8)
(defn twice-count [w] (* 2 (count w)))
(twice-count "lando")    // 10
(map twice-count people)   // (6 16)

//改写成匿名函数形式
(map (fn [w] (* 2 (count w))) people)    // (6 16)
//更简单的形式, #定义了一个匿名函数
(map #(* 2 (count %)) people)

一些更高级的应用
(def v [3 1 2])
(apply + v)   //6
(apply max v)   //3
(filter odd? v)  //(3 1)
(filter #(< % 3) v)  //(1 2)

实现一个函数(big st n),当st长度不超过n时返回true
(defn big [st n] (<= (count st) n))
(big "abc" 2)   //false

